import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { StarRating } from "./StarRating"; // Assume this is a custom component

export default function DynamicForm() {
  const [formConfig, setFormConfig] = useState(null);
  const [schema, setSchema] = useState(null);

  useEffect(() => {
    // In a real application, you would fetch this from an API or load it from a file
    import("./config/form-config.json").then((config) => {
      setFormConfig(config.default);
      setSchema(generateZodSchema(config.default));
    });
  }, []);

  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(schema),
  });

  const onSubmit = (data) => {
    console.log(data);
    // Handle form submission
  };

  const generateZodSchema = (config) => {
    const schemaObj = {};
    config.sections.forEach((section) => {
      section.elements.forEach((element) => {
        let fieldSchema = z.any();
        if (element.validation) {
          if (element.type === "text" || element.type === "rich-text") {
            fieldSchema = z.string();
          } else if (element.type === "checkbox") {
            fieldSchema = z.array(z.string());
          } else if (element.type === "date") {
            fieldSchema = z.date();
          } else if (
            element.type === "custom" &&
            element.component === "StarRating"
          ) {
            fieldSchema = z.number();
          }

          if (element.validation.required) {
            fieldSchema = fieldSchema.nonempty({
              message: "This field is required",
            });
          }
          if (element.validation.min) {
            fieldSchema = fieldSchema.min(element.validation.min, {
              message: `Minimum ${element.validation.min} required`,
            });
          }
          if (element.validation.max) {
            fieldSchema = fieldSchema.max(element.validation.max, {
              message: `Maximum ${element.validation.max} allowed`,
            });
          }
          if (element.validation.email) {
            fieldSchema = fieldSchema.email({
              message: "Invalid email address",
            });
          }
        }
        schemaObj[element.id] = fieldSchema;
      });
    });
    return z.object(schemaObj);
  };

  const renderFormElement = (element) => {
    switch (element.type) {
      case "text":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <Input {...field} placeholder={element.placeholder} />
            )}
          />
        );
      case "checkbox":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue={[]}
            render={({ field }) => (
              <div className="flex flex-col space-y-2">
                {element.options.map((option) => (
                  <div
                    key={option.value}
                    className="flex items-center space-x-2"
                  >
                    <Checkbox
                      id={`${element.id}-${option.value}`}
                      checked={field.value.includes(option.value)}
                      onCheckedChange={(checked) => {
                        const updatedValue = checked
                          ? [...field.value, option.value]
                          : field.value.filter(
                              (value) => value !== option.value
                            );
                        field.onChange(updatedValue);
                      }}
                    />
                    <Label htmlFor={`${element.id}-${option.value}`}>
                      {option.label}
                    </Label>
                  </div>
                ))}
              </div>
            )}
          />
        );
      case "radio":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <RadioGroup
                onValueChange={field.onChange}
                defaultValue={field.value}
                className="flex flex-col space-y-1"
              >
                {element.options.map((option) => (
                  <div
                    key={option.value}
                    className="flex items-center space-x-2"
                  >
                    <RadioGroupItem
                      value={option.value}
                      id={`${element.id}-${option.value}`}
                    />
                    <Label htmlFor={`${element.id}-${option.value}`}>
                      {option.label}
                    </Label>
                  </div>
                ))}
              </RadioGroup>
            )}
          />
        );
      case "select":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <SelectTrigger>
                  <SelectValue placeholder="Select an option" />
                </SelectTrigger>
                <SelectContent>
                  {element.options.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}
          />
        );
      case "rich-text":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue=""
            render={({ field }) => (
              <Textarea {...field} placeholder={element.placeholder} />
            )}
          />
        );
      case "date":
        return (
          <Controller
            name={element.id}
            control={control}
            defaultValue={null}
            render={({ field }) => (
              <Calendar
                mode="single"
                selected={field.value}
                onSelect={field.onChange}
                className="rounded-md border"
              />
            )}
          />
        );
      case "custom":
        if (element.component === "StarRating") {
          return (
            <Controller
              name={element.id}
              control={control}
              defaultValue={0}
              render={({ field }) => (
                <StarRating
                  value={field.value}
                  onChange={field.onChange}
                  max={element.validation.max}
                />
              )}
            />
          );
        }
        return null;
      default:
        return null;
    }
  };

  if (!formConfig) {
    return <div>Loading...</div>;
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
      {formConfig.sections.map((section) => (
        <Card key={section.id}>
          <CardHeader>
            <CardTitle>{section.title}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {section.elements.map((element) => (
              <div key={element.id} className="space-y-2">
                <Label htmlFor={element.id}>{element.label}</Label>
                {renderFormElement(element)}
                {errors[element.id] && (
                  <p className="text-sm text-red-500">
                    {errors[element.id].message}
                  </p>
                )}
              </div>
            ))}
          </CardContent>
        </Card>
      ))}
      <Button type="submit">Submit</Button>
    </form>
  );
}
